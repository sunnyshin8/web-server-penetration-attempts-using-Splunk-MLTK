# Web Server Security Alerts Configuration

## Alert Definitions for Splunk

### 1. SQL Injection Attack Alert
```
[alert_sql_injection]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | regex uri_path="(?i)(union(\s+(all|distinct))?(\s+select)|select.+(from|limit)|insert(\s+into)?|update(\s+\w+)?(\s+set)|delete(\s+from)?|drop(\s+(table|database))|create(\s+(table|database)))" | stats count by src_ip, uri_path | where count >= 1
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.severity = 3
alert.suppress = 1
alert.suppress.period = 300s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = CRITICAL: SQL Injection Attack Detected
action.email.message = SQL injection attack detected from IP: $result.src_ip$ targeting path: $result.uri_path$
action.webhook = 1
action.webhook.param.url = https://hooks.slack.com/your-webhook-url
```

### 2. Brute Force Attack Alert
```
[alert_brute_force]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | where status IN ("401","403") OR match(uri_path, "(?i)(login|signin|auth)") | bucket _time span=1m | stats count by _time, src_ip | where count > 10
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */1 * * * *
alert.severity = 2
alert.suppress = 1
alert.suppress.period = 900s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = HIGH: Brute Force Attack Detected
action.email.message = Brute force attack detected from IP: $result.src_ip$ with $result.count$ failed attempts in 1 minute
```

### 3. Directory Traversal Alert
```
[alert_directory_traversal]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | regex uri_path="(\.\./|\.\.%2f|\.\.%5c|%2e%2e%2f|%2e%2e%5c)" | stats count by src_ip, uri_path | where count >= 1
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.severity = 3
alert.suppress = 1
alert.suppress.period = 300s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = CRITICAL: Directory Traversal Attack Detected
action.email.message = Directory traversal attack detected from IP: $result.src_ip$ targeting path: $result.uri_path$
```

### 4. Admin Access Anomaly Alert
```
[alert_admin_access]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | regex uri_path="(?i)(admin|wp-admin|phpmyadmin|cpanel|webmail|manager|console|dashboard)" | stats count by src_ip, uri_path | where count > 5
dispatch.earliest_time = -10m
dispatch.latest_time = now
cron_schedule = */10 * * * *
alert.severity = 2
alert.suppress = 1
alert.suppress.period = 600s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = HIGH: Suspicious Admin Access Attempts
action.email.message = Multiple admin access attempts detected from IP: $result.src_ip$ to path: $result.uri_path$
```

### 5. High Error Rate Alert
```
[alert_high_error_rate]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | bucket _time span=5m | stats count, sum(eval(if(status>=400,1,0))) as errors by _time, src_ip | eval error_rate=errors/count | where error_rate > 0.5 AND count > 20
dispatch.earliest_time = -10m
dispatch.latest_time = now
cron_schedule = */10 * * * *
alert.severity = 2
alert.suppress = 1
alert.suppress.period = 600s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = HIGH: High Error Rate Detected
action.email.message = High error rate detected from IP: $result.src_ip$ - Error rate: $result.error_rate$
```

### 6. XSS Attack Alert
```
[alert_xss_attack]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | regex uri_path="(?i)(<script|javascript:|on\w+\s*=|<iframe|<object|<embed|alert\(|confirm\(|prompt\()" | stats count by src_ip, uri_path | where count >= 1
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.severity = 3
alert.suppress = 1
alert.suppress.period = 300s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = CRITICAL: XSS Attack Detected
action.email.message = Cross-site scripting attack detected from IP: $result.src_ip$ targeting path: $result.uri_path$
```

### 7. Suspicious Bot Activity Alert
```
[alert_suspicious_bot]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | where match(http_user_agent, "(?i)(bot|crawler|spider|scraper|scanner)") | bucket _time span=10m | stats count, dc(uri_path) as unique_paths by _time, src_ip, http_user_agent | where count > 100 OR unique_paths > 50
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */15 * * * *
alert.severity = 1
alert.suppress = 1
alert.suppress.period = 1800s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = MEDIUM: Suspicious Bot Activity
action.email.message = Suspicious bot activity detected from IP: $result.src_ip$ - User Agent: $result.http_user_agent$
```

### 8. DDoS Attack Alert
```
[alert_ddos_attack]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | bucket _time span=1m | stats count by _time, src_ip | where count > 200
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */1 * * * *
alert.severity = 3
alert.suppress = 1
alert.suppress.period = 300s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = CRITICAL: Potential DDoS Attack
action.email.message = Potential DDoS attack detected from IP: $result.src_ip$ - $result.count$ requests in 1 minute
```

### 9. Command Injection Alert
```
[alert_command_injection]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | regex uri_path="(?i)(;|\||&|`|\$\(|%0a|%0d|%3b|%7c|%26|%60)(\s*)(cat|ls|dir|type|echo|ping|nc|netcat|wget|curl|python|perl|ruby|php|bash|sh|cmd|powershell)" | stats count by src_ip, uri_path | where count >= 1
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.severity = 3
alert.suppress = 1
alert.suppress.period = 300s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = CRITICAL: Command Injection Attack Detected
action.email.message = Command injection attack detected from IP: $result.src_ip$ targeting path: $result.uri_path$
```

### 10. Anomaly Detection Alert (MLTK-based)
```
[alert_ml_anomaly]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | bucket _time span=1h | stats count as request_count, sum(eval(if(status>=400,1,0))) as error_count, dc(uri_path) as unique_paths by _time, src_ip | eval error_rate=error_count/request_count | fit IsolationForest request_count error_rate unique_paths into web_anomaly_model | where outlier="True"
dispatch.earliest_time = -1h
dispatch.latest_time = now
cron_schedule = 0 * * * *
alert.severity = 2
alert.suppress = 1
alert.suppress.period = 3600s
alert.suppress.fields = src_ip
action.email = 1
action.email.to = security@company.com
action.email.subject = HIGH: ML Anomaly Detected
action.email.message = Machine learning anomaly detected for IP: $result.src_ip$ - Request count: $result.request_count$, Error rate: $result.error_rate$
```

## Saved Searches for Threat Hunting

### Weekly Security Report
```
[savedsearch_weekly_security_report]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs earliest=-7d@d latest=now | eval attack_type=case(match(uri_path, "(?i)(union|select)"), "SQL Injection", match(uri_path, "\\.\\./"), "Directory Traversal", match(uri_path, "(?i)admin"), "Admin Access", status IN ("401","403"), "Auth Failure", status="404", "Not Found", 1=1, "Normal") | stats count by attack_type, date_trunc(date(_time), "day") | xyseries _time attack_type count | fillnull value=0
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
cron_schedule = 0 8 * * 1
is_scheduled = 1
action.email = 1
action.email.to = security-team@company.com
action.email.subject = Weekly Security Report
action.email.message = Please find the weekly security report attached.
action.email.format = table
```

### Top Threat Sources
```
[savedsearch_top_threat_sources]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | where status>=400 OR match(uri_path, "(?i)(admin|login|sql|script)") | stats count as threat_score, dc(uri_path) as unique_targets, values(status) as response_codes by src_ip | lookup geoip_lookup client_ip as src_ip OUTPUT country, region, city | sort -threat_score | head 50
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
cron_schedule = 0 */4 * * *
is_scheduled = 1
```

### Attack Pattern Analysis
```
[savedsearch_attack_patterns]
search = index=webserver sourcetype=access_combined OR sourcetype=csv_access_logs | eval hour=strftime(_time, "%H"), day=strftime(_time, "%A") | where status>=400 OR match(uri_path, "(?i)(admin|login|sql)") | stats count by hour, day | xyseries day hour count | fillnull value=0
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
cron_schedule = 0 6 * * *
is_scheduled = 1
```

## Alert Response Playbooks

### Critical Alert Response (SQL Injection, Directory Traversal, XSS)
1. **Immediate Actions:**
   - Block source IP at firewall/WAF level
   - Escalate to security team lead
   - Document attack details in incident management system

2. **Investigation Steps:**
   - Analyze full attack session from source IP
   - Check for data exfiltration or system compromise
   - Review server logs for successful attacks
   - Identify vulnerable application components

3. **Containment:**
   - Apply emergency patches if vulnerability identified
   - Implement temporary application-level blocks
   - Monitor for lateral movement or persistence

### High Alert Response (Brute Force, Admin Access)
1. **Immediate Actions:**
   - Rate limit source IP
   - Notify system administrators
   - Enable additional logging for affected endpoints

2. **Investigation Steps:**
   - Check for successful authentication attempts
   - Review account activity for compromised accounts
   - Analyze attack timing and patterns

3. **Mitigation:**
   - Implement CAPTCHA or additional authentication factors
   - Review and strengthen password policies
   - Consider geo-blocking if attacks from specific regions

### Medium Alert Response (Bot Activity)
1. **Monitoring:**
   - Continue monitoring bot behavior
   - Check for resource consumption impact
   - Analyze crawling patterns

2. **Assessment:**
   - Determine if bot is legitimate (search engine) or malicious
   - Check robots.txt compliance
   - Assess server performance impact

3. **Action:**
   - Update robots.txt if necessary
   - Implement bot-specific rate limiting
   - Consider blocking if malicious behavior confirmed

## Integration Examples

### Slack Webhook Integration
```json
{
  "webhook_url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
  "channel": "#security-alerts",
  "username": "Splunk Security Bot",
  "text": "🚨 Security Alert: $alert.type$ detected from IP $result.src_ip$",
  "attachments": [
    {
      "color": "danger",
      "fields": [
        {"title": "Attack Type", "value": "$alert.type$", "short": true},
        {"title": "Source IP", "value": "$result.src_ip$", "short": true},
        {"title": "Target Path", "value": "$result.uri_path$", "short": false},
        {"title": "Time", "value": "$result._time$", "short": true}
      ]
    }
  ]
}
```

### SIEM Integration (QRadar/ArcSight)
```xml
<alert>
  <severity>$alert.severity$</severity>
  <source_ip>$result.src_ip$</source_ip>
  <target_path>$result.uri_path$</target_path>
  <attack_type>$alert.type$</attack_type>
  <timestamp>$result._time$</timestamp>
  <user_agent>$result.http_user_agent$</user_agent>
  <status_code>$result.status$</status_code>
</alert>
```

### Automated Response Script
```bash
#!/bin/bash
# Automated response script for critical alerts

ALERT_TYPE="$1"
SOURCE_IP="$2"
TARGET_PATH="$3"

case "$ALERT_TYPE" in
  "SQL_INJECTION"|"DIRECTORY_TRAVERSAL"|"XSS")
    # Block IP immediately
    iptables -A INPUT -s $SOURCE_IP -j DROP
    # Add to WAF blocklist
    curl -X POST "https://waf-api.example.com/block" -d "ip=$SOURCE_IP"
    # Create incident ticket
    curl -X POST "https://ticketing-api.example.com/incidents" -d "{\"severity\":\"critical\",\"source\":\"$SOURCE_IP\",\"type\":\"$ALERT_TYPE\"}"
    ;;
  "BRUTE_FORCE")
    # Rate limit IP
    iptables -A INPUT -s $SOURCE_IP -m limit --limit 10/min -j ACCEPT
    iptables -A INPUT -s $SOURCE_IP -j DROP
    ;;
esac
```
